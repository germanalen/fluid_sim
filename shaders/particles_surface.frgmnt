#version 330 core

uniform mat4 proj;
uniform mat4 view;
uniform sampler2D depth_texture;
uniform sampler2D thickness_texture;
uniform sampler2D voxel_depth_texture;
uniform sampler2D voxel_normal_texture;

in vec2 uv;

void phong_lighting(in vec3 view_dir, in vec3 normal, in vec3 light_dir, in int spec_exp,
                    out float diffuse, out float specular) {
    diffuse = max(0, dot(normal, light_dir));
    vec3 halfway_dir = normalize(light_dir + view_dir);
    specular = pow(max(dot(normal, halfway_dir), 0.0), spec_exp);
}

vec3 get_view_pos(in vec2 uv, in float depth) {
    vec3 view_pos;
    view_pos.x = depth * (uv.x * 2 - 1) / proj[0][0];
    view_pos.y = depth * (uv.y * 2 - 1) / proj[1][1];
    view_pos.z = -depth;
    return view_pos;
}



void main() {
    float voxel_depth = texture(voxel_depth_texture, uv).r;
    vec3 voxel_normal = texture(voxel_normal_texture, uv).rgb;
    //if (voxel_depth == 0) discard;

    //gl_FragColor = vec4(texture(voxel_normal_texture, uv).rgb, 1);
    //gl_FragColor = vec4(vec3(voxel_depth) * .2, 1);
    //if (uv.x < 0 || uv.x > 1 || uv.y < 0 || uv.y > 1) discard;
    //gl_FragColor = vec4(uv, 0, 1);
    //gl_FragColor = vec4(vec3(texture(depth_texture, uv).r),1);
    //return;


    float depth = texture(depth_texture, uv).r;
    if (depth == 0 && voxel_depth == 0) discard;


    // normal
    ivec2 depth_texture_size = textureSize(depth_texture, 0);
    vec2 texel_size = 1.0f/depth_texture_size;

    vec3 p = get_view_pos(uv, texture(depth_texture, uv).r);
    vec3 p_r = get_view_pos(uv + vec2(texel_size.x, 0), texture(depth_texture, uv + vec2(texel_size.x, 0)).r);
    vec3 p_l = get_view_pos(uv - vec2(texel_size.x, 0), texture(depth_texture, uv - vec2(texel_size.x, 0)).r);
    vec3 p_t = get_view_pos(uv + vec2(0, texel_size.y), texture(depth_texture, uv + vec2(0, texel_size.y)).r);
    vec3 p_b = get_view_pos(uv - vec2(0, texel_size.y), texture(depth_texture, uv - vec2(0, texel_size.y)).r);

    vec3 ddx = p_r - p;
    vec3 ddx2 = p - p_l;
    if (abs(ddx.z) > abs(ddx2.z))
        ddx = ddx2;

    vec3 ddy = p_t - p;
    vec3 ddy2 = p - p_b;
    if (abs(ddy.z) > abs(ddy2.z))
        ddy = ddy2;

    vec3 normal = normalize(cross(ddx, ddy));
    

    // absorbtion
    float thickness = texture(thickness_texture, uv).r;
    vec3 absorbtion_color = clamp(exp(-5*vec3(.9,.2,.1) * thickness), vec3(0), vec3(1));

    // phong
    vec3 light_dir = mat3(view) * normalize(vec3(1,1,.5));
    vec3 view_dir = normalize(-p);
    float diffuse, specular;
    phong_lighting(view_dir, normal, light_dir, 32, diffuse, specular);


    // fresnel
    float n_air = 1;
    float n_water = 1.3;

    float r0_ = (n_air - n_water)/(n_air + n_water);
    float r0 = r0_ * r0_;

    float fresnel = r0 + (1 - r0) * pow(1 - dot(view_dir, normal), 5);


    float transparency = clamp(.5*exp(-.1 * thickness), 0, 1);
    //transparency = length(absorbtion_color);
    transparency = (absorbtion_color.x+absorbtion_color.y+absorbtion_color.z)/3;
   
    vec3 voxel_view_dir = -normalize(get_view_pos(uv, voxel_depth));
    float voxel_diffuse, voxel_specular;
    phong_lighting(voxel_view_dir, normalize(voxel_normal), light_dir, 16, voxel_diffuse, voxel_specular);

    vec3 voxel_color = vec3(.5);
    if (voxel_depth != 0)
        voxel_color = (vec3(.15) + vec3(.4) * voxel_diffuse) + vec3(1) * voxel_specular;

    vec3 water_color = absorbtion_color * diffuse;
    vec3 color = mix(voxel_color, water_color, (1-transparency)) + specular * vec3(1);


    if (depth == 0) depth = 1000;
    if (voxel_depth == 0) voxel_depth = 1000;

    color = vec3(.5);
    if (depth < voxel_depth) {
        vec3 alpha = mix(absorbtion_color, voxel_color, exp(-thickness));
        color = alpha * (1-fresnel) + vec3(1) * fresnel + vec3(1) * specular;
    } else {
        color = voxel_color;
    }
   
    gl_FragColor = vec4(color, 1);
}

